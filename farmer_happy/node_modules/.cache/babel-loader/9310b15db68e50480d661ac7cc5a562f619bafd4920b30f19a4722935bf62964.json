{"ast":null,"code":"import { ref, reactive, onMounted, onUnmounted, watch } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { authService } from '../api/auth';\nimport logger from '../utils/logger';\nexport default {\n  name: 'Register',\n  setup() {\n    const router = useRouter();\n    const loading = ref(false);\n    const form = reactive({\n      // 通用字段\n      phone: '',\n      password: '',\n      nickname: '',\n      user_type: '',\n      // 农户特定字段\n      farm_name: '',\n      farm_address: '',\n      farm_size: null,\n      // 买家特定字段\n      shipping_address: '',\n      // 专家特定字段\n      expertise_field: '',\n      work_experience: null,\n      // 银行特定字段\n      bank_name: '',\n      branch_name: ''\n    });\n    const errors = reactive({\n      // 通用字段\n      phone: '',\n      password: '',\n      nickname: '',\n      user_type: '',\n      // 农户特定字段\n      farm_name: '',\n      farm_address: '',\n      farm_size: '',\n      // 买家特定字段\n      shipping_address: '',\n      // 专家特定字段\n      expertise_field: '',\n      work_experience: '',\n      // 银行特定字段\n      bank_name: '',\n      branch_name: ''\n    });\n    onMounted(() => {\n      logger.lifecycle('Register', 'mounted');\n      logger.info('REGISTER_COMPONENT', '注册页面已加载');\n    });\n    onUnmounted(() => {\n      logger.lifecycle('Register', 'unmounted');\n    });\n\n    // 监听用户类型变化\n    watch(() => form.user_type, (newType, oldType) => {\n      logger.info('REGISTER_COMPONENT', '用户类型变化', {\n        from: oldType,\n        to: newType\n      });\n    });\n    const validateForm = () => {\n      logger.debug('REGISTER_COMPONENT', '开始验证注册表单', {\n        userType: form.user_type\n      });\n      let isValid = true;\n      // Reset errors\n      Object.keys(errors).forEach(key => errors[key] = '');\n\n      // 通用字段验证\n      // Phone validation\n      if (!form.phone) {\n        errors.phone = '请输入手机号';\n        isValid = false;\n      } else if (!/^1[3-9]\\d{9}$/.test(form.phone)) {\n        errors.phone = '请输入有效的手机号';\n        isValid = false;\n      }\n\n      // Password validation\n      if (!form.password) {\n        errors.password = '请输入密码';\n        isValid = false;\n      } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,32}$/.test(form.password)) {\n        errors.password = '密码必须包含大小写字母和数字，长度8-32位';\n        isValid = false;\n      }\n\n      // Nickname validation\n      if (form.nickname && (form.nickname.length < 1 || form.nickname.length > 30)) {\n        errors.nickname = '昵称长度应在1-30个字符之间';\n        isValid = false;\n      }\n\n      // User type validation\n      if (!form.user_type) {\n        errors.user_type = '请选择用户类型';\n        isValid = false;\n      }\n\n      // 根据用户类型验证特定字段\n      if (form.user_type === 'farmer') {\n        logger.debug('REGISTER_COMPONENT', '验证农户特定字段');\n        // 农户特定字段验证\n        if (!form.farm_name) {\n          errors.farm_name = '请输入农场名称';\n          isValid = false;\n        } else if (form.farm_name.length > 100) {\n          errors.farm_name = '农场名称不能超过100个字符';\n          isValid = false;\n        }\n        if (form.farm_address && form.farm_address.length > 200) {\n          errors.farm_address = '农场地址不能超过200个字符';\n          isValid = false;\n        }\n        if (form.farm_size && (isNaN(form.farm_size) || form.farm_size < 0)) {\n          errors.farm_size = '请输入有效的农场面积';\n          isValid = false;\n        }\n      } else if (form.user_type === 'buyer') {\n        logger.debug('REGISTER_COMPONENT', '验证买家特定字段');\n        // 买家特定字段验证\n        if (form.shipping_address && form.shipping_address.length > 500) {\n          errors.shipping_address = '收货地址不能超过500个字符';\n          isValid = false;\n        }\n      } else if (form.user_type === 'expert') {\n        logger.debug('REGISTER_COMPONENT', '验证专家特定字段');\n        // 专家特定字段验证\n        if (!form.expertise_field) {\n          errors.expertise_field = '请输入专业领域';\n          isValid = false;\n        } else if (form.expertise_field.length > 100) {\n          errors.expertise_field = '专业领域不能超过100个字符';\n          isValid = false;\n        }\n        if (form.work_experience && (isNaN(form.work_experience) || form.work_experience < 0)) {\n          errors.work_experience = '请输入有效的工作经验年限';\n          isValid = false;\n        }\n      } else if (form.user_type === 'bank') {\n        logger.debug('REGISTER_COMPONENT', '验证银行特定字段');\n        // 银行特定字段验证\n        if (!form.bank_name) {\n          errors.bank_name = '请输入银行名称';\n          isValid = false;\n        } else if (form.bank_name.length > 100) {\n          errors.bank_name = '银行名称不能超过100个字符';\n          isValid = false;\n        }\n        if (form.branch_name && form.branch_name.length > 100) {\n          errors.branch_name = '分行名称不能超过100个字符';\n          isValid = false;\n        }\n      }\n      logger.validation('RegisterForm', isValid, errors);\n      return isValid;\n    };\n    const handleSubmit = async () => {\n      logger.userAction('REGISTER_SUBMIT', {\n        phone: form.phone,\n        userType: form.user_type\n      });\n      if (!validateForm()) {\n        logger.warn('REGISTER_COMPONENT', '表单验证失败', {\n          userType: form.user_type\n        });\n        return;\n      }\n      loading.value = true;\n      logger.info('REGISTER_COMPONENT', '开始提交注册请求', {\n        phone: form.phone,\n        userType: form.user_type\n      });\n      try {\n        await authService.register(form);\n        logger.info('REGISTER_COMPONENT', '注册成功，准备跳转到登录页');\n        logger.navigation('/register', '/login');\n\n        // 显示成功提示\n        alert('注册成功！即将跳转到登录页面');\n        router.push('/login');\n      } catch (error) {\n        logger.error('REGISTER_COMPONENT', '注册失败', {\n          phone: form.phone,\n          userType: form.user_type,\n          errorCode: error.code,\n          errorMessage: error.message || error\n        }, error);\n\n        // 先清空所有错误信息\n        Object.keys(errors).forEach(key => errors[key] = '');\n\n        // 根据错误码处理不同情况\n        if (error.code === 409) {\n          // 该手机号已注册此用户类型\n          errors.phone = '该手机号已注册此用户类型，请选择其他用户类型或直接登录';\n          logger.warn('REGISTER_COMPONENT', '该手机号已注册此用户类型', {\n            phone: form.phone,\n            userType: form.user_type\n          });\n        } else if (error.code === 400) {\n          // 可能是密码错误或参数验证失败\n          if (error.message === '密码错误') {\n            errors.password = '该手机号已存在，但密码不正确。如果您已注册过其他身份，请使用相同的密码';\n            logger.warn('REGISTER_COMPONENT', '手机号已存在但密码错误', {\n              phone: form.phone\n            });\n          } else if (error.message === '参数验证失败' && error.errors && error.errors.length > 0) {\n            // 处理字段级别的错误\n            console.log('参数验证失败，详细错误：', error.errors);\n            error.errors.forEach(err => {\n              console.log('处理错误字段：', err.field, err.message);\n              if (Object.prototype.hasOwnProperty.call(errors, err.field)) {\n                errors[err.field] = err.message;\n              } else {\n                // 如果前端没有对应的错误字段，显示在密码字段\n                console.warn('未找到对应的错误字段：', err.field);\n              }\n            });\n            logger.warn('REGISTER_COMPONENT', '参数验证失败', {\n              errors: error.errors\n            });\n          } else {\n            // 其他 400 错误\n            errors.password = error.message || '注册失败，请检查输入信息';\n            logger.warn('REGISTER_COMPONENT', '注册失败', {\n              message: error.message\n            });\n          }\n        } else if (error.code === 401) {\n          errors.password = '认证失败，请重新尝试';\n          logger.warn('REGISTER_COMPONENT', '认证失败');\n        } else {\n          // 500 或其他错误\n          errors.password = error.message || '注册失败，服务器内部错误，请稍后重试';\n          logger.error('REGISTER_COMPONENT', '注册出现无错误', {\n            code: error.code,\n            message: error.message\n          });\n        }\n      } finally {\n        loading.value = false;\n        logger.debug('REGISTER_COMPONENT', '注册请求处理完成');\n      }\n    };\n    return {\n      form,\n      errors,\n      loading,\n      handleSubmit\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","onUnmounted","watch","useRouter","authService","logger","name","setup","router","loading","form","phone","password","nickname","user_type","farm_name","farm_address","farm_size","shipping_address","expertise_field","work_experience","bank_name","branch_name","errors","lifecycle","info","newType","oldType","from","to","validateForm","debug","userType","isValid","Object","keys","forEach","key","test","length","isNaN","validation","handleSubmit","userAction","warn","value","register","navigation","alert","push","error","errorCode","code","errorMessage","message","console","log","err","field","prototype","hasOwnProperty","call"],"sources":["D:\\STUDY\\FarmerHappy\\farmer_happy\\src\\components\\Register.vue"],"sourcesContent":["<template>\r\n  <div class=\"auth-container\">\r\n    <div class=\"auth-card\">\r\n      <h1 class=\"auth-title\">注册农乐平台</h1>\r\n      <form @submit.prevent=\"handleSubmit\">\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">手机号</label>\r\n          <input\r\n            v-model=\"form.phone\"\r\n            type=\"tel\"\r\n            class=\"form-input\"\r\n            :class=\"{ 'error': errors.phone }\"\r\n            placeholder=\"请输入手机号\"\r\n          />\r\n          <span v-if=\"errors.phone\" class=\"form-error\">{{ errors.phone }}</span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">密码</label>\r\n          <input\r\n            v-model=\"form.password\"\r\n            type=\"password\"\r\n            class=\"form-input\"\r\n            :class=\"{ 'error': errors.password }\"\r\n            placeholder=\"请输入密码（8-32位，包含大小写字母和数字）\"\r\n          />\r\n          <span v-if=\"errors.password\" class=\"form-error\">{{ errors.password }}</span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">昵称</label>\r\n          <input\r\n            v-model=\"form.nickname\"\r\n            type=\"text\"\r\n            class=\"form-input\"\r\n            :class=\"{ 'error': errors.nickname }\"\r\n            placeholder=\"请输入昵称\"\r\n          />\r\n          <span v-if=\"errors.nickname\" class=\"form-error\">{{ errors.nickname }}</span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">用户类型</label>\r\n          <select\r\n            v-model=\"form.user_type\"\r\n            class=\"form-input\"\r\n            :class=\"{ 'error': errors.user_type }\"\r\n          >\r\n            <option value=\"\">请选择用户类型</option>\r\n            <option value=\"farmer\">农户</option>\r\n            <option value=\"buyer\">买家</option>\r\n            <option value=\"expert\">技术专家</option>\r\n            <option value=\"bank\">银行</option>\r\n          </select>\r\n          <span v-if=\"errors.user_type\" class=\"form-error\">{{ errors.user_type }}</span>\r\n        </div>\r\n\r\n        <!-- 农户特定字段 -->\r\n        <template v-if=\"form.user_type === 'farmer'\">\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">农场名称</label>\r\n            <input\r\n              v-model=\"form.farm_name\"\r\n              type=\"text\"\r\n              class=\"form-input\"\r\n              :class=\"{ 'error': errors.farm_name }\"\r\n              placeholder=\"请输入农场名称\"\r\n            />\r\n            <span v-if=\"errors.farm_name\" class=\"form-error\">{{ errors.farm_name }}</span>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">农场地址</label>\r\n            <input\r\n              v-model=\"form.farm_address\"\r\n              type=\"text\"\r\n              class=\"form-input\"\r\n              :class=\"{ 'error': errors.farm_address }\"\r\n              placeholder=\"请输入农场地址\"\r\n            />\r\n            <span v-if=\"errors.farm_address\" class=\"form-error\">{{ errors.farm_address }}</span>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">农场面积（亩）</label>\r\n            <input\r\n              v-model.number=\"form.farm_size\"\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              class=\"form-input\"\r\n              :class=\"{ 'error': errors.farm_size }\"\r\n              placeholder=\"请输入农场面积\"\r\n            />\r\n            <span v-if=\"errors.farm_size\" class=\"form-error\">{{ errors.farm_size }}</span>\r\n          </div>\r\n        </template>\r\n\r\n        <!-- 买家特定字段 -->\r\n        <template v-if=\"form.user_type === 'buyer'\">\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">收货地址</label>\r\n            <input\r\n              v-model=\"form.shipping_address\"\r\n              type=\"text\"\r\n              class=\"form-input\"\r\n              :class=\"{ 'error': errors.shipping_address }\"\r\n              placeholder=\"请输入默认收货地址\"\r\n            />\r\n            <span v-if=\"errors.shipping_address\" class=\"form-error\">{{ errors.shipping_address }}</span>\r\n          </div>\r\n        </template>\r\n\r\n        <!-- 专家特定字段 -->\r\n        <template v-if=\"form.user_type === 'expert'\">\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">专业领域</label>\r\n            <input\r\n              v-model=\"form.expertise_field\"\r\n              type=\"text\"\r\n              class=\"form-input\"\r\n              :class=\"{ 'error': errors.expertise_field }\"\r\n              placeholder=\"请输入专业领域\"\r\n            />\r\n            <span v-if=\"errors.expertise_field\" class=\"form-error\">{{ errors.expertise_field }}</span>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">工作经验（年）</label>\r\n            <input\r\n              v-model.number=\"form.work_experience\"\r\n              type=\"number\"\r\n              class=\"form-input\"\r\n              :class=\"{ 'error': errors.work_experience }\"\r\n              placeholder=\"请输入工作经验年限\"\r\n            />\r\n            <span v-if=\"errors.work_experience\" class=\"form-error\">{{ errors.work_experience }}</span>\r\n          </div>\r\n        </template>\r\n\r\n        <!-- 银行特定字段 -->\r\n        <template v-if=\"form.user_type === 'bank'\">\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">银行名称</label>\r\n            <input\r\n              v-model=\"form.bank_name\"\r\n              type=\"text\"\r\n              class=\"form-input\"\r\n              :class=\"{ 'error': errors.bank_name }\"\r\n              placeholder=\"请输入银行名称\"\r\n            />\r\n            <span v-if=\"errors.bank_name\" class=\"form-error\">{{ errors.bank_name }}</span>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">分行名称</label>\r\n            <input\r\n              v-model=\"form.branch_name\"\r\n              type=\"text\"\r\n              class=\"form-input\"\r\n              :class=\"{ 'error': errors.branch_name }\"\r\n              placeholder=\"请输入分行名称\"\r\n            />\r\n            <span v-if=\"errors.branch_name\" class=\"form-error\">{{ errors.branch_name }}</span>\r\n          </div>\r\n        </template>\r\n\r\n        <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"loading\">\r\n          {{ loading ? '注册中...' : '注册' }}\r\n        </button>\r\n\r\n        <div class=\"auth-switch\">\r\n          已有账号？\r\n          <router-link to=\"/login\">立即登录</router-link>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted, onUnmounted, watch } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { authService } from '../api/auth';\r\nimport logger from '../utils/logger';\r\n\r\nexport default {\r\n  name: 'Register',\r\n  setup() {\r\n    const router = useRouter();\r\n    const loading = ref(false);\r\n    const form = reactive({\r\n      // 通用字段\r\n      phone: '',\r\n      password: '',\r\n      nickname: '',\r\n      user_type: '',\r\n      // 农户特定字段\r\n      farm_name: '',\r\n      farm_address: '',\r\n      farm_size: null,\r\n      // 买家特定字段\r\n      shipping_address: '',\r\n      // 专家特定字段\r\n      expertise_field: '',\r\n      work_experience: null,\r\n      // 银行特定字段\r\n      bank_name: '',\r\n      branch_name: ''\r\n    });\r\n    const errors = reactive({\r\n      // 通用字段\r\n      phone: '',\r\n      password: '',\r\n      nickname: '',\r\n      user_type: '',\r\n      // 农户特定字段\r\n      farm_name: '',\r\n      farm_address: '',\r\n      farm_size: '',\r\n      // 买家特定字段\r\n      shipping_address: '',\r\n      // 专家特定字段\r\n      expertise_field: '',\r\n      work_experience: '',\r\n      // 银行特定字段\r\n      bank_name: '',\r\n      branch_name: ''\r\n    });\r\n\r\n    onMounted(() => {\r\n      logger.lifecycle('Register', 'mounted');\r\n      logger.info('REGISTER_COMPONENT', '注册页面已加载');\r\n    });\r\n\r\n    onUnmounted(() => {\r\n      logger.lifecycle('Register', 'unmounted');\r\n    });\r\n\r\n    // 监听用户类型变化\r\n    watch(() => form.user_type, (newType, oldType) => {\r\n      logger.info('REGISTER_COMPONENT', '用户类型变化', {\r\n        from: oldType,\r\n        to: newType\r\n      });\r\n    });\r\n\r\n    const validateForm = () => {\r\n      logger.debug('REGISTER_COMPONENT', '开始验证注册表单', {\r\n        userType: form.user_type\r\n      });\r\n      \r\n      let isValid = true;\r\n      // Reset errors\r\n      Object.keys(errors).forEach(key => errors[key] = '');\r\n\r\n      // 通用字段验证\r\n      // Phone validation\r\n      if (!form.phone) {\r\n        errors.phone = '请输入手机号';\r\n        isValid = false;\r\n      } else if (!/^1[3-9]\\d{9}$/.test(form.phone)) {\r\n        errors.phone = '请输入有效的手机号';\r\n        isValid = false;\r\n      }\r\n\r\n      // Password validation\r\n      if (!form.password) {\r\n        errors.password = '请输入密码';\r\n        isValid = false;\r\n      } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,32}$/.test(form.password)) {\r\n        errors.password = '密码必须包含大小写字母和数字，长度8-32位';\r\n        isValid = false;\r\n      }\r\n\r\n      // Nickname validation\r\n      if (form.nickname && (form.nickname.length < 1 || form.nickname.length > 30)) {\r\n        errors.nickname = '昵称长度应在1-30个字符之间';\r\n        isValid = false;\r\n      }\r\n\r\n      // User type validation\r\n      if (!form.user_type) {\r\n        errors.user_type = '请选择用户类型';\r\n        isValid = false;\r\n      }\r\n\r\n      // 根据用户类型验证特定字段\r\n      if (form.user_type === 'farmer') {\r\n        logger.debug('REGISTER_COMPONENT', '验证农户特定字段');\r\n        // 农户特定字段验证\r\n        if (!form.farm_name) {\r\n          errors.farm_name = '请输入农场名称';\r\n          isValid = false;\r\n        } else if (form.farm_name.length > 100) {\r\n          errors.farm_name = '农场名称不能超过100个字符';\r\n          isValid = false;\r\n        }\r\n\r\n        if (form.farm_address && form.farm_address.length > 200) {\r\n          errors.farm_address = '农场地址不能超过200个字符';\r\n          isValid = false;\r\n        }\r\n\r\n        if (form.farm_size && (isNaN(form.farm_size) || form.farm_size < 0)) {\r\n          errors.farm_size = '请输入有效的农场面积';\r\n          isValid = false;\r\n        }\r\n      }\r\n\r\n      else if (form.user_type === 'buyer') {\r\n        logger.debug('REGISTER_COMPONENT', '验证买家特定字段');\r\n        // 买家特定字段验证\r\n        if (form.shipping_address && form.shipping_address.length > 500) {\r\n          errors.shipping_address = '收货地址不能超过500个字符';\r\n          isValid = false;\r\n        }\r\n      }\r\n\r\n      else if (form.user_type === 'expert') {\r\n        logger.debug('REGISTER_COMPONENT', '验证专家特定字段');\r\n        // 专家特定字段验证\r\n        if (!form.expertise_field) {\r\n          errors.expertise_field = '请输入专业领域';\r\n          isValid = false;\r\n        } else if (form.expertise_field.length > 100) {\r\n          errors.expertise_field = '专业领域不能超过100个字符';\r\n          isValid = false;\r\n        }\r\n\r\n        if (form.work_experience && (isNaN(form.work_experience) || form.work_experience < 0)) {\r\n          errors.work_experience = '请输入有效的工作经验年限';\r\n          isValid = false;\r\n        }\r\n      }\r\n\r\n      else if (form.user_type === 'bank') {\r\n        logger.debug('REGISTER_COMPONENT', '验证银行特定字段');\r\n        // 银行特定字段验证\r\n        if (!form.bank_name) {\r\n          errors.bank_name = '请输入银行名称';\r\n          isValid = false;\r\n        } else if (form.bank_name.length > 100) {\r\n          errors.bank_name = '银行名称不能超过100个字符';\r\n          isValid = false;\r\n        }\r\n\r\n        if (form.branch_name && form.branch_name.length > 100) {\r\n          errors.branch_name = '分行名称不能超过100个字符';\r\n          isValid = false;\r\n        }\r\n      }\r\n\r\n      logger.validation('RegisterForm', isValid, errors);\r\n      return isValid;\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n      logger.userAction('REGISTER_SUBMIT', {\r\n        phone: form.phone,\r\n        userType: form.user_type\r\n      });\r\n      \r\n      if (!validateForm()) {\r\n        logger.warn('REGISTER_COMPONENT', '表单验证失败', {\r\n          userType: form.user_type\r\n        });\r\n        return;\r\n      }\r\n\r\n      loading.value = true;\r\n      logger.info('REGISTER_COMPONENT', '开始提交注册请求', {\r\n        phone: form.phone,\r\n        userType: form.user_type\r\n      });\r\n      \r\n      try {\r\n        await authService.register(form);\r\n        logger.info('REGISTER_COMPONENT', '注册成功，准备跳转到登录页');\r\n        logger.navigation('/register', '/login');\r\n        \r\n        // 显示成功提示\r\n        alert('注册成功！即将跳转到登录页面');\r\n        router.push('/login');\r\n      } catch (error) {\r\n        logger.error('REGISTER_COMPONENT', '注册失败', {\r\n          phone: form.phone,\r\n          userType: form.user_type,\r\n          errorCode: error.code,\r\n          errorMessage: error.message || error\r\n        }, error);\r\n        \r\n        // 先清空所有错误信息\r\n        Object.keys(errors).forEach(key => errors[key] = '');\r\n        \r\n        // 根据错误码处理不同情况\r\n        if (error.code === 409) {\r\n          // 该手机号已注册此用户类型\r\n          errors.phone = '该手机号已注册此用户类型，请选择其他用户类型或直接登录';\r\n          logger.warn('REGISTER_COMPONENT', '该手机号已注册此用户类型', { \r\n            phone: form.phone,\r\n            userType: form.user_type\r\n          });\r\n        } else if (error.code === 400) {\r\n          // 可能是密码错误或参数验证失败\r\n          if (error.message === '密码错误') {\r\n            errors.password = '该手机号已存在，但密码不正确。如果您已注册过其他身份，请使用相同的密码';\r\n            logger.warn('REGISTER_COMPONENT', '手机号已存在但密码错误', { \r\n              phone: form.phone \r\n            });\r\n          } else if (error.message === '参数验证失败' && error.errors && error.errors.length > 0) {\r\n            // 处理字段级别的错误\r\n            console.log('参数验证失败，详细错误：', error.errors);\r\n            error.errors.forEach(err => {\r\n              console.log('处理错误字段：', err.field, err.message);\r\n              if (Object.prototype.hasOwnProperty.call(errors, err.field)) {\r\n                errors[err.field] = err.message;\r\n              } else {\r\n                // 如果前端没有对应的错误字段，显示在密码字段\r\n                console.warn('未找到对应的错误字段：', err.field);\r\n              }\r\n            });\r\n            logger.warn('REGISTER_COMPONENT', '参数验证失败', { errors: error.errors });\r\n          } else {\r\n            // 其他 400 错误\r\n            errors.password = error.message || '注册失败，请检查输入信息';\r\n            logger.warn('REGISTER_COMPONENT', '注册失败', { message: error.message });\r\n          }\r\n        } else if (error.code === 401) {\r\n          errors.password = '认证失败，请重新尝试';\r\n          logger.warn('REGISTER_COMPONENT', '认证失败');\r\n        } else {\r\n          // 500 或其他错误\r\n          errors.password = error.message || '注册失败，服务器内部错误，请稍后重试';\r\n          logger.error('REGISTER_COMPONENT', '注册出现无错误', { \r\n            code: error.code,\r\n            message: error.message \r\n          });\r\n        }\r\n      } finally {\r\n        loading.value = false;\r\n        logger.debug('REGISTER_COMPONENT', '注册请求处理完成');\r\n      }\r\n    };\r\n\r\n    return {\r\n      form,\r\n      errors,\r\n      loading,\r\n      handleSubmit\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import '../assets/styles/theme.css';\r\n\r\nselect.form-input {\r\n  appearance: none;\r\n  background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23A0AEC0' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M6 9l6 6 6-6'/%3E%3C/svg%3E\");\r\n  background-repeat: no-repeat;\r\n  background-position: right 0.75rem center;\r\n  background-size: 16px;\r\n  padding-right: 2.5rem;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}